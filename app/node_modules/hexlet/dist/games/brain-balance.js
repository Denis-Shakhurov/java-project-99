'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hexletPairs = require('hexlet-pairs');

var _ = require('..');

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rule = 'Balance the given number.';

var valueRangeMin = 10;
var valueRangeMax = 1000;

var getMaxOfArray = function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
};

var getMinOfArray = function getMinOfArray(numArray) {
  return Math.min.apply(null, numArray);
};

var normalizeToString = function normalizeToString(arr) {
  var ascendingArr = arr.sort();
  return ascendingArr.join('');
};

var balanceArr = function balanceArr(arr) {
  var balancedArr = arr;

  for (var i = 0; i < balancedArr.length; i += 1) {
    for (var j = 0; j < balancedArr.length; j += 1) {
      if (balancedArr[i] - balancedArr[j] > 1) {
        balancedArr[i] -= 1;
        balancedArr[j] += 1;
      }
    }
  }
  return balancedArr;
};

var getBalancedAsString = function getBalancedAsString(n) {
  var str = String(n);
  var strArray = str.split('');
  var numArray = strArray.map(function (num) {
    return Number(num);
  });
  var balancedArray = balanceArr(numArray);
  while (getMaxOfArray(balancedArray) - getMinOfArray(balancedArray) > 1) {
    balancedArray = balanceArr(balancedArray);
  }
  return normalizeToString(balancedArray);
};

var askBalance = function askBalance() {
  var num = (0, _utils2.default)(valueRangeMin, valueRangeMax);
  var question = '' + num;
  var answer = getBalancedAsString(num);
  var game = (0, _hexletPairs.cons)(question, answer);
  return game;
};

var startBalanceGame = function startBalanceGame() {
  return (0, _.makeGame)(askBalance, rule);
};

exports.default = startBalanceGame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nYW1lcy9icmFpbi1iYWxhbmNlLmpzIl0sIm5hbWVzIjpbInJ1bGUiLCJ2YWx1ZVJhbmdlTWluIiwidmFsdWVSYW5nZU1heCIsImdldE1heE9mQXJyYXkiLCJNYXRoIiwibWF4IiwiYXBwbHkiLCJudW1BcnJheSIsImdldE1pbk9mQXJyYXkiLCJtaW4iLCJub3JtYWxpemVUb1N0cmluZyIsImFyciIsImFzY2VuZGluZ0FyciIsInNvcnQiLCJqb2luIiwiYmFsYW5jZUFyciIsImJhbGFuY2VkQXJyIiwiaSIsImxlbmd0aCIsImoiLCJnZXRCYWxhbmNlZEFzU3RyaW5nIiwibiIsInN0ciIsIlN0cmluZyIsInN0ckFycmF5Iiwic3BsaXQiLCJtYXAiLCJOdW1iZXIiLCJudW0iLCJiYWxhbmNlZEFycmF5IiwiYXNrQmFsYW5jZSIsInF1ZXN0aW9uIiwiYW5zd2VyIiwiZ2FtZSIsInN0YXJ0QmFsYW5jZUdhbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPLDJCQUFiOztBQUVBLElBQU1DLGdCQUFnQixFQUF0QjtBQUNBLElBQU1DLGdCQUFnQixJQUF0Qjs7QUFFQSxJQUFNQyxnQkFBZ0IsU0FBaEJBLGFBQWdCO0FBQUEsU0FBWUMsS0FBS0MsR0FBTCxDQUFTQyxLQUFULENBQWUsSUFBZixFQUFxQkMsUUFBckIsQ0FBWjtBQUFBLENBQXRCOztBQUVBLElBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0I7QUFBQSxTQUFZSixLQUFLSyxHQUFMLENBQVNILEtBQVQsQ0FBZSxJQUFmLEVBQXFCQyxRQUFyQixDQUFaO0FBQUEsQ0FBdEI7O0FBRUEsSUFBTUcsb0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsR0FBRCxFQUFTO0FBQ2pDLE1BQU1DLGVBQWVELElBQUlFLElBQUosRUFBckI7QUFDQSxTQUFPRCxhQUFhRSxJQUFiLENBQWtCLEVBQWxCLENBQVA7QUFDRCxDQUhEOztBQUtBLElBQU1DLGFBQWEsU0FBYkEsVUFBYSxDQUFDSixHQUFELEVBQVM7QUFDMUIsTUFBTUssY0FBY0wsR0FBcEI7O0FBRUEsT0FBSyxJQUFJTSxJQUFJLENBQWIsRUFBZ0JBLElBQUlELFlBQVlFLE1BQWhDLEVBQXdDRCxLQUFLLENBQTdDLEVBQWdEO0FBQzlDLFNBQUssSUFBSUUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxZQUFZRSxNQUFoQyxFQUF3Q0MsS0FBSyxDQUE3QyxFQUFnRDtBQUM5QyxVQUFJSCxZQUFZQyxDQUFaLElBQWlCRCxZQUFZRyxDQUFaLENBQWpCLEdBQWtDLENBQXRDLEVBQXlDO0FBQ3ZDSCxvQkFBWUMsQ0FBWixLQUFrQixDQUFsQjtBQUNBRCxvQkFBWUcsQ0FBWixLQUFrQixDQUFsQjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFNBQU9ILFdBQVA7QUFDRCxDQVpEOztBQWNBLElBQU1JLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLENBQUQsRUFBTztBQUNqQyxNQUFNQyxNQUFNQyxPQUFPRixDQUFQLENBQVo7QUFDQSxNQUFNRyxXQUFXRixJQUFJRyxLQUFKLENBQVUsRUFBVixDQUFqQjtBQUNBLE1BQU1sQixXQUFXaUIsU0FBU0UsR0FBVCxDQUFhO0FBQUEsV0FBT0MsT0FBT0MsR0FBUCxDQUFQO0FBQUEsR0FBYixDQUFqQjtBQUNBLE1BQUlDLGdCQUFnQmQsV0FBV1IsUUFBWCxDQUFwQjtBQUNBLFNBQU9KLGNBQWMwQixhQUFkLElBQStCckIsY0FBY3FCLGFBQWQsQ0FBL0IsR0FBOEQsQ0FBckUsRUFBd0U7QUFDdEVBLG9CQUFnQmQsV0FBV2MsYUFBWCxDQUFoQjtBQUNEO0FBQ0QsU0FBT25CLGtCQUFrQm1CLGFBQWxCLENBQVA7QUFDRCxDQVREOztBQVdBLElBQU1DLGFBQWEsU0FBYkEsVUFBYSxHQUFNO0FBQ3ZCLE1BQU1GLE1BQU0scUJBQWUzQixhQUFmLEVBQThCQyxhQUE5QixDQUFaO0FBQ0EsTUFBTTZCLGdCQUFjSCxHQUFwQjtBQUNBLE1BQU1JLFNBQVNaLG9CQUFvQlEsR0FBcEIsQ0FBZjtBQUNBLE1BQU1LLE9BQU8sdUJBQUtGLFFBQUwsRUFBZUMsTUFBZixDQUFiO0FBQ0EsU0FBT0MsSUFBUDtBQUNELENBTkQ7O0FBUUEsSUFBTUMsbUJBQW1CLFNBQW5CQSxnQkFBbUI7QUFBQSxTQUFNLGdCQUFTSixVQUFULEVBQXFCOUIsSUFBckIsQ0FBTjtBQUFBLENBQXpCOztrQkFFZWtDLGdCIiwiZmlsZSI6ImJyYWluLWJhbGFuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zIH0gZnJvbSAnaGV4bGV0LXBhaXJzJztcbmltcG9ydCB7IG1ha2VHYW1lIH0gZnJvbSAnLi4nO1xuaW1wb3J0IGdlbmVyYXRlTnVtYmVyIGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcnVsZSA9ICdCYWxhbmNlIHRoZSBnaXZlbiBudW1iZXIuJztcblxuY29uc3QgdmFsdWVSYW5nZU1pbiA9IDEwO1xuY29uc3QgdmFsdWVSYW5nZU1heCA9IDEwMDA7XG5cbmNvbnN0IGdldE1heE9mQXJyYXkgPSBudW1BcnJheSA9PiBNYXRoLm1heC5hcHBseShudWxsLCBudW1BcnJheSk7XG5cbmNvbnN0IGdldE1pbk9mQXJyYXkgPSBudW1BcnJheSA9PiBNYXRoLm1pbi5hcHBseShudWxsLCBudW1BcnJheSk7XG5cbmNvbnN0IG5vcm1hbGl6ZVRvU3RyaW5nID0gKGFycikgPT4ge1xuICBjb25zdCBhc2NlbmRpbmdBcnIgPSBhcnIuc29ydCgpO1xuICByZXR1cm4gYXNjZW5kaW5nQXJyLmpvaW4oJycpO1xufTtcblxuY29uc3QgYmFsYW5jZUFyciA9IChhcnIpID0+IHtcbiAgY29uc3QgYmFsYW5jZWRBcnIgPSBhcnI7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWxhbmNlZEFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmFsYW5jZWRBcnIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmIChiYWxhbmNlZEFycltpXSAtIGJhbGFuY2VkQXJyW2pdID4gMSkge1xuICAgICAgICBiYWxhbmNlZEFycltpXSAtPSAxO1xuICAgICAgICBiYWxhbmNlZEFycltqXSArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYmFsYW5jZWRBcnI7XG59O1xuXG5jb25zdCBnZXRCYWxhbmNlZEFzU3RyaW5nID0gKG4pID0+IHtcbiAgY29uc3Qgc3RyID0gU3RyaW5nKG4pO1xuICBjb25zdCBzdHJBcnJheSA9IHN0ci5zcGxpdCgnJyk7XG4gIGNvbnN0IG51bUFycmF5ID0gc3RyQXJyYXkubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gIGxldCBiYWxhbmNlZEFycmF5ID0gYmFsYW5jZUFycihudW1BcnJheSk7XG4gIHdoaWxlIChnZXRNYXhPZkFycmF5KGJhbGFuY2VkQXJyYXkpIC0gZ2V0TWluT2ZBcnJheShiYWxhbmNlZEFycmF5KSA+IDEpIHtcbiAgICBiYWxhbmNlZEFycmF5ID0gYmFsYW5jZUFycihiYWxhbmNlZEFycmF5KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplVG9TdHJpbmcoYmFsYW5jZWRBcnJheSk7XG59O1xuXG5jb25zdCBhc2tCYWxhbmNlID0gKCkgPT4ge1xuICBjb25zdCBudW0gPSBnZW5lcmF0ZU51bWJlcih2YWx1ZVJhbmdlTWluLCB2YWx1ZVJhbmdlTWF4KTtcbiAgY29uc3QgcXVlc3Rpb24gPSBgJHtudW19YDtcbiAgY29uc3QgYW5zd2VyID0gZ2V0QmFsYW5jZWRBc1N0cmluZyhudW0pO1xuICBjb25zdCBnYW1lID0gY29ucyhxdWVzdGlvbiwgYW5zd2VyKTtcbiAgcmV0dXJuIGdhbWU7XG59O1xuXG5jb25zdCBzdGFydEJhbGFuY2VHYW1lID0gKCkgPT4gbWFrZUdhbWUoYXNrQmFsYW5jZSwgcnVsZSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0YXJ0QmFsYW5jZUdhbWU7XG4iXX0=